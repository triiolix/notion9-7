// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  workspaces    WorkspaceMember[]
  ownedWorkspaces Workspace[]
  pages         Page[]
  blocks        Block[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workspace {
  id          String   @id @default(cuid())
  name        String
  description String?
  icon        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ownerId     String

  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  members     WorkspaceMember[]
  pages       Page[]
}

model WorkspaceMember {
  id          String   @id @default(cuid())
  workspaceId String
  userId      String
  role        Role     @default(MEMBER)
  joinedAt    DateTime @default(now())

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, userId])
}

model Page {
  id          String   @id @default(cuid())
  title       String
  icon        String?
  coverImage  String?
  isPublished Boolean  @default(false)
  isArchived  Boolean  @default(false)
  parentId    String?
  workspaceId String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent      Page?     @relation("PageToPage", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    Page[]    @relation("PageToPage")
  blocks      Block[]

  @@index([workspaceId])
  @@index([userId])
  @@index([parentId])
}

model Block {
  id       String    @id @default(cuid())
  type     BlockType
  content  String?   // JSON content
  position Int
  pageId   String
  userId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  page     Page @relation(fields: [pageId], references: [id], onDelete: Cascade)
  user     User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([pageId])
  @@index([position])
}

enum Role {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum BlockType {
  TEXT
  HEADING_1
  HEADING_2
  HEADING_3
  BULLETED_LIST
  NUMBERED_LIST
  TODO
  TOGGLE
  QUOTE
  DIVIDER
  CALLOUT
  CODE
  IMAGE
  VIDEO
  FILE
  BOOKMARK
  TABLE
  TABLE_ROW
  COLUMN_LIST
  COLUMN
  EMBED
  EQUATION
  BREADCRUMB
  TABLE_OF_CONTENTS
}
